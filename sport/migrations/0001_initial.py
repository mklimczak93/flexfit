# Generated by Django 4.1.7 on 2023-06-01 16:37

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('profile_photo', models.ImageField(default='sport/static/MockupPhoto01.png', upload_to='user_profiles')),
                ('city', models.CharField(choices=[('WA', 'Warszawa'), ('KR', 'Kraków'), ('LO', 'Łódź'), ('GD', 'Gdańsk)'), ('WR', 'Wrocław'), ('PO', 'Poznań')], default='Warszawa', max_length=16)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('description', models.TextField(default='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')),
                ('address', models.CharField(max_length=120)),
                ('date', models.DateField(auto_now_add=True)),
                ('time', models.TimeField(auto_now=True)),
                ('duration', models.PositiveSmallIntegerField()),
                ('photo', models.ImageField(default='sport/static/MockupPhoto01.png', upload_to='class_profiles')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('rate', models.IntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('description', models.CharField(blank=True, max_length=120)),
                ('date', models.DateField(auto_now_add=True)),
                ('author', models.ManyToManyField(related_name='author', to=settings.AUTH_USER_MODEL)),
                ('class_rated', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_rated', to='sport.class')),
            ],
        ),
        migrations.CreateModel(
            name='Studio',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('address', models.CharField(max_length=120)),
                ('city', models.CharField(choices=[('WA', 'Warszawa'), ('KR', 'Kraków'), ('LO', 'Łódź'), ('GD', 'Gdańsk)'), ('WR', 'Wrocław'), ('PO', 'Poznań')], default='Warszawa', max_length=16)),
                ('description', models.TextField(default='Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.')),
                ('logo', models.ImageField(default='sport/static/MockupPhoto01.png', upload_to='studio_profiles')),
                ('studio_photo', models.ImageField(default='sport/static/MockupPhoto01.png', upload_to='studio_profiles')),
                ('classes', models.ManyToManyField(blank=True, related_name='studio_classes', to='sport.class')),
                ('reviews', models.ManyToManyField(blank=True, related_name='studio_reviews', to='sport.review')),
            ],
        ),
        migrations.CreateModel(
            name='Trainer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=60)),
                ('reviews', models.ManyToManyField(blank=True, related_name='trainer_reviews', to='sport.review')),
                ('studio', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='trainer_studio', to='sport.studio')),
            ],
        ),
        migrations.AddField(
            model_name='studio',
            name='trainers',
            field=models.ManyToManyField(blank=True, related_name='studio_trainers', to='sport.trainer'),
        ),
        migrations.AddField(
            model_name='class',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='class_reviews', to='sport.review'),
        ),
        migrations.AddField(
            model_name='class',
            name='studio',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_studio', to='sport.studio'),
        ),
        migrations.AddField(
            model_name='class',
            name='trainer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='class_trainer', to='sport.trainer'),
        ),
        migrations.AddField(
            model_name='user',
            name='classes',
            field=models.ManyToManyField(blank=True, related_name='user_classes', to='sport.class'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='user_reviews', to='sport.review'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
